name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust-target: x86_64-apple-darwin
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
      fail-fast: false
      max-parallel: 1
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js with Yarn
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    # 新增步骤：强制更新关键依赖
    - name: Update Vulnerable Dependencies
      run: |
        yarn add axios@^1.8.2
        yarn add @babel/runtime-corejs2@^7.26.10 @babel/runtime@^7.26.10
        # 如果直接依赖中存在旧版本，需要更新父依赖
        yarn upgrade qiniu-js tiny-oss

    - name: Install dependencies
      run: |
        # 使用 --ignore-engines 绕过引擎版本检查（如有需要）
        yarn install --frozen-lockfile --ignore-engines --production=false

    # 优化安全检查逻辑
    - name: Security Audit
      run: |
        # 设置允许的漏洞级别（仅允许low）
        yarn audit --groups dependencies --level high
        AUDIT_RESULT=$?
        # 退出码逻辑: 16=high, 8=moderate, 4=low
        if [ $AUDIT_RESULT -ge 16 ]; then
          echo "发现高风险漏洞，必须立即修复！"
          exit 1
        elif [ $AUDIT_RESULT -ge 8 ]; then
          echo "发现中风险漏洞，记录但允许继续构建..."
        else
          echo "无高风险漏洞"
        fi

    - name: Build application
      shell: bash
      run: yarn tauri:build
      env:
        # Windows 环境需要特别处理
        TAURI_PLATFORM: ${{ matrix.rust-target }}

    - name: Package artifacts
      run: yarn tauri build --target ${{ matrix.rust-target }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          src-tauri/target/release/*
          !src-tauri/target/release/*.d
        retention-days: 7

    # Windows 专用处理步骤
    - name: Windows Cleanup
      if: runner.os == 'Windows'
      run: |
        # 清理 Windows 长路径问题
        git config --system core.longpaths true
        Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue