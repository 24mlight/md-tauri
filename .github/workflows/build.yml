name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max-old-space-size=8192"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            # 为 macOS 动态设置目标架构
            rust-target: auto
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
      fail-fast: false
      # max-parallel: 1
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Ubuntu 系统依赖安装 (修复依赖冲突)
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 移除旧的冲突包（如果存在）
        sudo apt-get remove -y libappindicator3-dev libappindicator3-1 || true
        
        # Ubuntu 24.04 兼容包安装
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          libssl-dev \
          libjavascriptcoregtk-4.1-dev \
          patchelf

        # 验证安装
        pkg-config --list-all | grep -E 'gtk|gdk' || echo "No GTK packages found"
        ls /usr/lib/x86_64-linux-gnu/pkgconfig/gtk+-3.0.pc || echo "GTK pkgconfig file not found"

    # 设置 macOS 构建目标
    - name: Setup macOS build target
      if: runner.os == 'macOS'
      id: macos-target
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
          echo "RUST_TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
        else
          echo "RUST_TARGET=x86_64-apple-darwin" >> $GITHUB_ENV
        fi
        echo "使用的目标架构: $RUST_TARGET"
        rustup target add $RUST_TARGET

    - name: Setup Node.js with Yarn
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    # 修复 Windows 图标
    - name: Fix Windows Icon
      if: runner.os == 'Windows'
      run: |
        # 如果目录不存在则创建
        if (!(Test-Path -Path "src-tauri/icons")) {
          New-Item -ItemType Directory -Force -Path "src-tauri/icons"
        }
        
        # 下载一个有效的标准格式图标文件
        Invoke-WebRequest -Uri "https://github.com/tauri-apps/tauri/raw/dev/examples/api/icons/icon.ico" -OutFile "src-tauri/icons/icon.ico"
        
        # 检查文件是否存在
        if (Test-Path -Path "src-tauri/icons/icon.ico") {
          Write-Host "图标文件已成功下载"
        } else {
          Write-Error "无法下载图标文件"
          exit 1
        }

    - name: Update Vulnerable Dependencies
      run: |
        yarn add axios@^1.8.2
        yarn add @babel/runtime-corejs2@^7.26.10 @babel/runtime@^7.26.10
        yarn upgrade qiniu-js tiny-oss

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile --ignore-engines --production=false

    # 跨平台兼容的安全检查
    - name: Security Audit
      shell: bash
      run: |
        yarn audit --groups dependencies --level high || echo "Security audit completed with warnings"
        
    # 针对不同平台的构建优化
    - name: Build application
      shell: bash
      run: |
        # 平台特定的优化
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          export NODE_OPTIONS="--max-old-space-size=24576"
          # 使用动态检测的目标架构
          export TAURI_PLATFORM="${{ env.RUST_TARGET }}"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          export NODE_OPTIONS="--max-old-space-size=12288"
          export TAURI_PLATFORM="${{ matrix.rust-target }}"
        else
          export NODE_OPTIONS="--max-old-space-size=8192"
          export TAURI_PLATFORM="${{ matrix.rust-target }}"
        fi
        
        echo "Building with NODE_OPTIONS: $NODE_OPTIONS"
        echo "Building with TAURI_PLATFORM: $TAURI_PLATFORM"
        
        # 使用正确的 Vite 构建命令
        yarn build:only --mode production
        
        # Tauri 构建 - macOS 特殊处理
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          yarn tauri build --target $TAURI_PLATFORM
        else
          yarn tauri build --target $TAURI_PLATFORM
        fi
      
      env:
        # 通用环境变量
        NODE_ENV: production
        VITE_DROP_CONSOLE: "true"
        VITE_SOURCEMAP: "false"
        RUST_BACKTRACE: "1"  # 添加更详细的错误信息

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          src-tauri/target/release/*
          !src-tauri/target/release/*.d
        retention-days: 7

    # Windows 特定清理
    - name: Windows Cleanup
      if: runner.os == 'Windows'
      run: |
        git config --system core.longpaths true
        Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue