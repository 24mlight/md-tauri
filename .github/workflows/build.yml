name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max-old-space-size=8192"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45  # Increase timeout for larger builds
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust-target: x86_64-apple-darwin
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
      fail-fast: false
      max-parallel: 1
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Ubuntu system dependencies installation (fixed formatting)
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          libssl-dev \
          libjavascriptcoregtk-4.0-dev \
          libayatana-appindicator3-dev \
          patchelf

        # Validation
        pkg-config --list-all | grep -E 'gtk|gdk'
        ls /usr/lib/x86_64-linux-gnu/pkgconfig/{gtk+-3.0,gdk-3.0}.pc || echo "GTK pkgconfig files not found"

    - name: Setup Node.js with Yarn
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    # Fix for Windows icon
    - name: Fix Windows Icon
      if: runner.os == 'Windows'
      run: |
        # Create a directory if it doesn't exist
        if (!(Test-Path -Path "src-tauri/icons")) {
          New-Item -ItemType Directory -Force -Path "src-tauri/icons"
        }
        # Download a valid icon file from Tauri's repository
        Invoke-WebRequest -Uri "https://github.com/tauri-apps/tauri/raw/dev/core/tauri/icons/icon.ico" -OutFile "src-tauri/icons/icon.ico"

    - name: Update Vulnerable Dependencies
      run: |
        yarn add axios@^1.8.2
        yarn add @babel/runtime-corejs2@^7.26.10 @babel/runtime@^7.26.10
        yarn upgrade qiniu-js tiny-oss

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile --ignore-engines --production=false

    # Cross-platform compatible security check
    - name: Security Audit
      shell: bash
      run: |
        yarn audit --groups dependencies --level high || echo "Security audit completed with warnings"
        
    # Build with platform-specific optimizations
    - name: Build application
      shell: bash
      run: |
        # Platform-specific optimizations
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          export NODE_OPTIONS="--max-old-space-size=24576"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          export NODE_OPTIONS="--max-old-space-size=12288"
        else
          export NODE_OPTIONS="--max-old-space-size=8192"
        fi
        
        echo "Building with NODE_OPTIONS: $NODE_OPTIONS"
        
        # Build frontend in chunks for memory optimization
        yarn build:only --mode production \
          --cache-dir .vite-cache \
          --emptyOutDir 
        
        # Tauri build with memory settings
        yarn tauri build --target ${{ matrix.rust-target }}
      
      env:
        # Common environment variables
        NODE_ENV: production
        TAURI_PLATFORM: ${{ matrix.rust-target }}
        VITE_DROP_CONSOLE: "true"
        VITE_SOURCEMAP: "false"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          src-tauri/target/release/*
          !src-tauri/target/release/*.d
        retention-days: 7

    # Windows-specific cleanup
    - name: Windows Cleanup
      if: runner.os == 'Windows'
      run: |
        git config --system core.longpaths true
        Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue