# name: Cross-Platform Build

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:
#     inputs:
#       create_release:
#         description: '创建发布版本'
#         required: true
#         default: 'false'
#         type: choice
#         options:
#           - 'true'
#           - 'false'
#       version_tag:
#         description: '版本标签 (例如: v1.0.0)'
#         required: false
#         type: string

# env:
#   CARGO_TERM_COLOR: always
#   NODE_OPTIONS: "--max-old-space-size=8192"

# jobs:
#   build:
#     name: Build (${{ matrix.os }})
#     runs-on: ${{ matrix.os }}
#     timeout-minutes: 45
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         include:
#           - os: ubuntu-latest
#             rust-target: x86_64-unknown-linux-gnu
#           - os: macos-latest
#             rust-target: x86_64-apple-darwin
#           - os: windows-latest
#             rust-target: x86_64-pc-windows-msvc
#       fail-fast: false

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     # macOS 架构设置
#     - name: Setup macOS Rust target
#       if: runner.os == 'macOS'
#       run: |
#         ARCH=$(uname -m)
#         if [ "$ARCH" = "arm64" ]; then
#           echo "TAURI_TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
#           rustup target add aarch64-apple-darwin
#         else
#           echo "TAURI_TARGET=x86_64-apple-darwin" >> $GITHUB_ENV
#           rustup target add x86_64-apple-darwin
#         fi

#     # Linux 依赖修复
#     - name: Install Linux Dependencies
#       if: runner.os == 'Linux'
#       run: |
#         sudo apt-get update
#         sudo apt-get remove -y libappindicator3-dev libappindicator3-1 || true
        
#         # 安装核心依赖
#         sudo apt-get install -y \
#           libgtk-3-dev \
#           libwebkit2gtk-4.1-dev \
#           libjavascriptcoregtk-4.1-dev \
#           libayatana-appindicator3-dev \
#           libsoup2.4-dev \
#           libsoup2.4-1 \
#           libssl-dev \
#           patchelf \
#           libglib2.0-dev \
#           libatk1.0-dev \
#           libpango1.0-dev \
#           libgdk-pixbuf2.0-dev \
#           libcairo2-dev

#         # 更新库缓存
#         sudo ldconfig
#         echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

#     # Windows 图标修复
#     - name: Prepare Windows Icon
#       if: runner.os == 'Windows'
#       run: |
#         if (-Not (Test-Path -Path "src-tauri/icons")) {
#           New-Item -ItemType Directory -Force -Path "src-tauri/icons"
#         }
        
#         # 使用正确的图标URL
#         $iconUrl = "https://raw.githubusercontent.com/tauri-apps/tauri/main/apps/desktop/src-tauri/icons/Square150x150Logo.png"
#         $icoPath = "src-tauri/icons/icon.ico"
        
#         if (Test-Path -Path "public/icon.png") {
#           Copy-Item -Path "public/icon.png" -Destination $icoPath -Force
#         } else {
#           Invoke-WebRequest -Uri $iconUrl -OutFile $icoPath
#         }
        
#         if (-Not (Test-Path -Path $icoPath)) {
#           Write-Error "图标文件准备失败"
#           exit 1
#         }

#     - name: Setup Node.js with Yarn
#       uses: actions/setup-node@v4
#       with:
#         node-version: 20.x
#         cache: 'yarn'

#     - name: Update Vulnerable Dependencies
#       run: |
#         yarn add axios@^1.8.2
#         yarn add @babel/runtime-corejs2@^7.26.10 @babel/runtime@^7.26.10
#         yarn upgrade qiniu-js tiny-oss

#     - name: Install dependencies
#       run: |
#         yarn install --frozen-lockfile --ignore-engines --production=false

#     - name: Security Audit
#       shell: bash
#       run: |
#         yarn audit --groups dependencies --level high || echo "Security audit completed with warnings"

#     - name: Build application
#       shell: bash
#       run: |
#         if [[ "$RUNNER_OS" == "macOS" ]]; then
#           export NODE_OPTIONS="--max-old-space-size=24576"
#         elif [[ "$RUNNER_OS" == "Windows" ]]; then
#           export NODE_OPTIONS="--max-old-space-size=12288"
#         else
#           export NODE_OPTIONS="--max-old-space-size=8192"
#         fi
#         echo "Building with NODE_OPTIONS: $NODE_OPTIONS"
#         yarn build:only --mode production
#       env:
#         NODE_ENV: production
#         VITE_DROP_CONSOLE: "true"
#         VITE_SOURCEMAP: "false"

#     # macOS 构建
#     - name: Build Tauri App (macOS)
#       if: runner.os == 'macOS'
#       run: |
#         brew install create-dmg || true
#         chmod +x src-tauri/build-aux/bundle_dmg.sh 2>/dev/null || true
#         yarn tauri build --target $TAURI_TARGET
#       env:
#         CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
#         RUST_BACKTRACE: "1"

#     # Linux 构建
#     - name: Build Tauri App (Linux)
#       if: runner.os == 'Linux'
#       run: |
#         export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig"
#         yarn tauri build --target ${{ matrix.rust-target }}
#       env:
#         CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
#         RUST_BACKTRACE: "1"
#         WEBKIT_DISABLE_COMPOSITING_MODE: "1"

#     # Windows 构建
#     - name: Build Tauri App (Windows)
#       if: runner.os == 'Windows'
#       run: |
#         yarn tauri build --target ${{ matrix.rust-target }}
#       env:
#         CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
#         RUST_BACKTRACE: "1"

#     - name: Get Package Version
#       id: package-version
#       shell: bash
#       run: |
#         VERSION=$(node -p "require('./package.json').version")
#         echo "version=$VERSION" >> $GITHUB_OUTPUT

#     - name: Rename Artifacts with Version
#       shell: bash
#       run: |
#         VERSION="${{ steps.package-version.outputs.version }}"
#         OS="${{ runner.os }}"
#         ARTIFACTS_DIR="src-tauri/target/release/bundle"
        
#         case $OS in
#           Linux)
#             for file in $ARTIFACTS_DIR/deb/*.deb; do
#               mv "$file" "${file%.deb}-$VERSION.deb"
#             done
#             for file in $ARTIFACTS_DIR/appimage/*.AppImage; do
#               mv "$file" "${file%.AppImage}-$VERSION.AppImage"
#             done
#             ;;
#           Windows)
#             for file in $ARTIFACTS_DIR/msi/*.msi; do
#               mv "$file" "${file%.msi}-$VERSION.msi"
#             done
#             ;;
#           macOS)
#             for file in $ARTIFACTS_DIR/dmg/*.dmg; do
#               mv "$file" "${file%.dmg}-$VERSION.dmg"
#             done
#             ;;
#         esac

#     - name: Upload artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: release-${{ matrix.os }}
#         path: |
#           src-tauri/target/release/bundle/deb/*.deb
#           src-tauri/target/release/bundle/appimage/*.AppImage
#           src-tauri/target/release/bundle/msi/*.msi
#           src-tauri/target/release/bundle/dmg/*.dmg
#         retention-days: 7

#     - name: Windows Cleanup
#       if: runner.os == 'Windows'
#       run: |
#         Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue

#   create-release:
#     name: Create Release
#     if: github.event.inputs.create_release == 'true'
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Get Package Version
#         id: package-version
#         run: |
#           VERSION=$(node -p "require('./package.json').version")
#           echo "version=$VERSION" >> $GITHUB_OUTPUT
      
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts
#           merge-multiple: true
      
#       - name: Create Tag
#         id: create_tag
#         run: |
#           TAG_NAME="${{ github.event.inputs.version_tag || 'v' }}${{ steps.package-version.outputs.version }}"
#           echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
#           git tag $TAG_NAME
#           git push origin $TAG_NAME
      
#       - name: Create Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: ${{ steps.create_tag.outputs.tag_name }}
#           name: Release ${{ steps.create_tag.outputs.tag_name }}
#           body: |
#             # 版本 ${{ steps.package-version.outputs.version }}
#             构建时间: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
#           files: |
#             artifacts/**/*
            