name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust-target: x86_64-apple-darwin
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js with Yarn
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    # 跨平台锁文件检查（非Windows）
    - name: Check Yarn Lockfile (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [ ! -f yarn.lock ]; then
          echo "生成新的 yarn.lock..."
          yarn install --pure-lockfile
          git add yarn.lock
          git commit -m "Auto-generate yarn.lock" || echo "No changes to commit"
        fi

    # Windows专用锁文件检查
    - name: Check Yarn Lockfile (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (-not (Test-Path yarn.lock)) {
          Write-Output "生成新的 yarn.lock..."
          yarn install --pure-lockfile
          git add yarn.lock
          git commit -m "Auto-generate yarn.lock" 
          if (-not $?) { Write-Output "No changes to commit" }
        }

    - name: Install dependencies
      run: yarn install --frozen-lockfile --ignore-engines
      env:
        # Windows需要特别设置PATH
        PATH: ${{ matrix.os == 'windows-latest' && format('{0}\bin;{0}\git\cmd;{1}', env.ProgramFiles, env.PATH) || env.PATH }}

    - name: Security Updates
      run: yarn add tough-cookie@^4.1.3 ws@^8.17.1

    - name: Build application
      run: yarn tauri:build
      # 分平台设置环境变量
      env:
        TAURI_PLATFORM: ${{ matrix.rust-target }}
        # Windows需要设置不同PATH
        PATH: ${{ matrix.os == 'windows-latest' && format('{0}\bin;{0}\git\usr\bin;{1}', env.ProgramFiles, env.PATH) || env.PATH }}

    - name: Package artifacts
      run: yarn tauri build --target ${{ matrix.rust-target }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          src-tauri/target/release/*
          !src-tauri/target/release/*.d

    # Windows专用清理步骤
    - name: Windows Fixes
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 修复长路径问题
        git config --global core.longpaths true
        # 重置文件权限
        git reset --hard