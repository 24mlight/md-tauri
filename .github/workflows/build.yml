name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # 添加手动触发选项
  workflow_dispatch:
    inputs:
      create_release:
        description: '创建发布版本'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      version_tag:
        description: '版本标签 (例如: v1.0.0)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max-old-space-size=8192"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust-target: x86_64-apple-darwin
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
      fail-fast: false
      # max-parallel: 1
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 设置 macOS 目标架构
    - name: Setup macOS Rust target
      if: runner.os == 'macOS'
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
          echo "TAURI_TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
          rustup target add aarch64-apple-darwin
        else
          echo "TAURI_TARGET=x86_64-apple-darwin" >> $GITHUB_ENV
          rustup target add x86_64-apple-darwin
        fi

    # Ubuntu 系统依赖安装 (修复 javascriptcoregtk 问题)
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 移除潜在冲突的包
        sudo apt-get remove -y libappindicator3-dev libappindicator3-1 || true
        
        # 安装 Ubuntu 24.04 (Noble) 兼容的依赖
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libwebkit2gtk-4.1-dev \
          libjavascriptcoregtk-4.0-dev \
          libjavascriptcoregtk-4.1-dev \
          libayatana-appindicator3-dev \
          libssl-dev \
          libsoup2.4-dev \
          patchelf
        
        # 如果 libsoup2.4-dev 安装失败，尝试 libsoup-3.0-dev
        if [ $? -ne 0 ]; then
          echo "尝试安装替代依赖..."
          sudo apt-get install -y libsoup-3.0-dev
        fi

        # 安装其他可能需要的依赖
        sudo apt-get install -y \
          libglib2.0-dev \
          libatk1.0-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libcairo2-dev
        
        # 验证安装
        pkg-config --list-all | grep -E 'gtk|gdk|soup|javascript' || echo "某些依赖可能未正确安装"
        
        # 显示 PKG_CONFIG_PATH 和已安装的包
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        ls -la /usr/lib/x86_64-linux-gnu/pkgconfig/ | grep -E 'javascript|webkit'

    - name: Setup Node.js with Yarn
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    # 简化的 Windows 图标检查 - 如果不存在则抛出错误
    - name: Verify Windows Icon
      if: runner.os == 'Windows'
      run: |
        # 检查图标文件是否存在
        if (!(Test-Path -Path "src-tauri/icons/icon.ico") -and !(Test-Path -Path "public/favicon.ico")) {
          Write-Error "无法找到必要的图标文件 (src-tauri/icons/icon.ico 或 public/favicon.ico)"
          exit 1
        }
        
        # 如果主图标不存在，但 public/favicon.ico 存在，则复制
        if (!(Test-Path -Path "src-tauri/icons/icon.ico") -and (Test-Path -Path "public/favicon.ico")) {
          # 确保目录存在
          if (!(Test-Path -Path "src-tauri/icons")) {
            New-Item -ItemType Directory -Force -Path "src-tauri/icons"
          }
          Copy-Item -Path "public/favicon.ico" -Destination "src-tauri/icons/icon.ico" -Force
          Write-Host "已从 public/favicon.ico 复制图标"
        } else {
          Write-Host "图标文件已存在"
        }

    - name: Update Vulnerable Dependencies
      run: |
        yarn add axios@^1.8.2
        yarn add @babel/runtime-corejs2@^7.26.10 @babel/runtime@^7.26.10
        yarn upgrade qiniu-js tiny-oss

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile --ignore-engines --production=false

    # 跨平台兼容的安全检查
    - name: Security Audit
      shell: bash
      run: |
        yarn audit --groups dependencies --level high || echo "Security audit completed with warnings"
        
    # 针对不同平台的构建优化
    - name: Build application
      shell: bash
      run: |
        # 平台特定的优化
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          export NODE_OPTIONS="--max-old-space-size=24576"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          export NODE_OPTIONS="--max-old-space-size=12288"
        else
          export NODE_OPTIONS="--max-old-space-size=8192"
        fi
        
        echo "Building with NODE_OPTIONS: $NODE_OPTIONS"
        
        # 使用正确的 Vite 构建命令
        yarn build:only --mode production
      
      env:
        # 通用环境变量
        NODE_ENV: production
        VITE_DROP_CONSOLE: "true"
        VITE_SOURCEMAP: "false"

    # 分离 Tauri 构建步骤以便针对不同平台做特殊处理
    - name: Build Tauri App (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "使用目标架构: $TAURI_TARGET"
        yarn tauri build --target $TAURI_TARGET
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"

    - name: Build Tauri App (Linux)
      if: runner.os == 'Linux'
      run: |
        # 设置额外的环境变量以帮助构建过程找到库
        export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig"
        # 检查是否安装了正确的包
        pkg-config --list-all | grep -E 'javascript|webkit'
        # 尝试确定需要哪个版本的 javascriptcoregtk
        pkg-config --modversion javascriptcoregtk-4.0 || echo "javascriptcoregtk-4.0 not found"
        pkg-config --modversion javascriptcoregtk-4.1 || echo "javascriptcoregtk-4.1 not found"
        # 设置环境变量以优先使用可用的版本
        export JAVASCRIPTCOREGTK_4_0_NO_PKG_CONFIG=1
        yarn tauri build --target ${{ matrix.rust-target }}
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"

    - name: Build Tauri App (Windows)
      if: runner.os == 'Windows'
      run: |
        yarn tauri build --target ${{ matrix.rust-target }}
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"

    # 获取包版本信息
    - name: Get Package Version
      id: package-version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    # 重命名生成的安装包以包含版本号
    - name: Rename Artifacts with Version
      shell: bash
      run: |
        VERSION="${{ steps.package-version.outputs.version }}"
        OS="${{ runner.os }}"
        
        if [[ "$OS" == "Linux" ]]; then
          ARTIFACTS_DIR="src-tauri/target/release/bundle"
          if [[ -d "$ARTIFACTS_DIR/deb" ]]; then
            for file in $ARTIFACTS_DIR/deb/*.deb; do
              newname=$(echo $file | sed "s/\.deb/-$VERSION.deb/")
              mv "$file" "$newname"
              echo "Renamed $file to $newname"
            done
          fi
          if [[ -d "$ARTIFACTS_DIR/appimage" ]]; then
            for file in $ARTIFACTS_DIR/appimage/*.AppImage; do
              newname=$(echo $file | sed "s/\.AppImage/-$VERSION.AppImage/")
              mv "$file" "$newname"
              echo "Renamed $file to $newname"
            done
          fi
        elif [[ "$OS" == "Windows" ]]; then
          ARTIFACTS_DIR="src-tauri/target/release/bundle"
          if [[ -d "$ARTIFACTS_DIR/msi" ]]; then
            for file in $ARTIFACTS_DIR/msi/*.msi; do
              newname=$(echo $file | sed "s/\.msi/-$VERSION.msi/")
              mv "$file" "$newname"
              echo "Renamed $file to $newname"
            done
          fi
        elif [[ "$OS" == "macOS" ]]; then
          ARTIFACTS_DIR="src-tauri/target/release/bundle"
          if [[ -d "$ARTIFACTS_DIR/dmg" ]]; then
            for file in $ARTIFACTS_DIR/dmg/*.dmg; do
              newname=$(echo $file | sed "s/\.dmg/-$VERSION.dmg/")
              mv "$file" "$newname"
              echo "Renamed $file to $newname"
            done
          fi
        fi

    # 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/dmg/*.dmg
          src-tauri/target/release/*.exe
          !src-tauri/target/release/*.d
          src-tauri/target/${{ env.TAURI_TARGET }}/release/* 
        retention-days: 7

    # Windows 特定清理
    - name: Windows Cleanup
      if: runner.os == 'Windows'
      run: |
        git config --system core.longpaths true
        Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue

  # 添加发布作业
  create-release:
    name: Create Release
    if: github.event.inputs.create_release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 获取包版本信息
      - name: Get Package Version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"
      
      # 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      
      # 列出下载的文件
      - name: List Downloaded Files
        run: |
          find artifacts -type f | sort
      
      # 创建版本标签
      - name: Create Tag
        id: create_tag
        run: |
          TAG_NAME="${{ github.event.inputs.version_tag }}"
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME="v${{ steps.package-version.outputs.version }}"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME
      
      # 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          name: Release ${{ steps.create_tag.outputs.tag_name }}
          body: |
            # 发布说明
            
            MD Markdown 编辑器版本 ${{ steps.package-version.outputs.version }}
            
            ## 变更内容
            
            - 自动构建于 ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - 编译时间: $(date '+%Y-%m-%d %H:%M:%S')
            
            ## 安装包
            
            - Windows: .msi 安装包
            - macOS: .dmg 安装包
            - Linux: .deb 和 .AppImage 安装包
          draft: true
          prerelease: false
          files: |
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.msi
            artifacts/**/*.dmg
            artifacts/**/*.exe