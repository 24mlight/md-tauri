# .github/actions/create-release/action.yml
name: 'Create Release'
description: 'Create a new GitHub release with artifacts'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get Package Version
      id: package-version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    
    - name: Create Tag
      id: create_tag
      shell: bash
      run: |
        TAG_NAME="v${{ steps.package-version.outputs.version }}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        git tag $TAG_NAME
        git push origin $TAG_NAME
    
    - name: Generate Release Info
      id: release_info
      shell: bash
      run: |
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        
        # 检查构建产物目录是否存在
        if [ ! -d "artifacts" ]; then
          echo "错误: 构建产物目录不存在，这可能表明构建过程失败或构建产物未被正确上传"
          exit 1
        fi
        
        # 列出下载的构建产物
        echo "找到以下构建产物:"
        find artifacts -type f -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" | sort
        
        # 检查是否找到了任何构建产物
        ARTIFACTS_COUNT=$(find artifacts -type f -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" | wc -l)
        if [ "$ARTIFACTS_COUNT" -eq 0 ]; then
          echo "警告: 没有找到任何构建产物文件，检查上传路径是否正确"
          # 列出所有文件以便调试
          echo "artifacts目录中的所有文件:"
          find artifacts -type f | sort
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create_tag.outputs.tag_name }}
        name: Release ${{ steps.create_tag.outputs.tag_name }}
        body: |
          # 版本 ${{ steps.package-version.outputs.version }}
          构建时间: ${{ steps.release_info.outputs.build_date }}
        files: |
          artifacts/**/*.dmg
          artifacts/**/*.msi
          artifacts/**/*.deb
          artifacts/**/*.AppImage
        fail_on_unmatched_files: false