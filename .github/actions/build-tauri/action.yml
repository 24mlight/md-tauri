# .github/actions/build-tauri/action.yml
name: 'Build Tauri App'
description: 'Build the Tauri application for different platforms'

inputs:
  os:
    description: 'Operating system'
    required: true
  rust-target:
    description: 'Rust target'
    required: true

runs:
  using: "composite"
  steps:
    - name: Build Tauri App (macOS)
      if: inputs.os == 'macOS'
      shell: bash
      run: |
        brew install create-dmg || true
        chmod +x src-tauri/build-aux/bundle_dmg.sh 2>/dev/null || true
        yarn tauri build --target $TAURI_TARGET
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"

    - name: Build Tauri App (Linux)
      if: inputs.os == 'Linux'
      shell: bash
      run: |
        export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig"
        # 安装javascriptcoregtk-4.1和webkit2gtk-4.1依赖
        sudo apt-get update
        sudo apt-get install -y libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
        # 创建从javascriptcoregtk-4.1到javascriptcoregtk-4.0的软链接
        if [ -f /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.1.pc ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.0.pc
          # 创建实际库文件的软链接
          for lib in /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.1.so*; do
            if [ -f "$lib" ]; then
              target_lib="${lib/4.1/4.0}"
              sudo ln -sf "$lib" "$target_lib"
              echo "Created symlink: $lib -> $target_lib"
            fi
          done
        fi
        # 创建从webkit2gtk-4.1到webkit2gtk-4.0的软链接
        if [ -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
          # 创建实际库文件的软链接
          for lib in /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.1.so*; do
            if [ -f "$lib" ]; then
              target_lib="${lib/4.1/4.0}"
              sudo ln -sf "$lib" "$target_lib"
              echo "Created symlink: $lib -> $target_lib"
            fi
          done
        fi
        # 显示库文件位置以便调试
        echo "Checking library files:"
        ls -la /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4*.so* || echo "No JavaScriptCoreGTK libraries found"
        ls -la /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4*.so* || echo "No WebKit2GTK libraries found"
        # 确保javascriptcoregtk-4.1能被正确找到
        pkg-config --exists javascriptcoregtk-4.1 || echo "javascriptcoregtk-4.1 not found in PKG_CONFIG_PATH"
        # 检查javascriptcoregtk-4.0是否可以被找到
        pkg-config --exists javascriptcoregtk-4.0 || echo "javascriptcoregtk-4.0 not found in PKG_CONFIG_PATH"
        # 检查webkit2gtk-4.0是否可以被找到
        pkg-config --exists webkit2gtk-4.0 || echo "webkit2gtk-4.0 not found in PKG_CONFIG_PATH"
        yarn tauri build --target ${{ inputs.rust-target }}
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"
        WEBKIT_DISABLE_COMPOSITING_MODE: "1"

    - name: Build Tauri App (Windows)
      if: inputs.os == 'Windows'
      shell: bash
      run: |
        # 在构建前运行图标转换脚本（使用.cjs扩展名）
        node src-tauri/build-aux/convert_icon.cjs
        # 如果转换失败，尝试安装ImageMagick并重试
        if [ $? -ne 0 ] && command -v choco &> /dev/null; then
          echo "尝试安装ImageMagick并重试转换..."
          choco install imagemagick -y
          node src-tauri/build-aux/convert_icon.cjs
        fi
        yarn tauri build --target ${{ inputs.rust-target }}
      env:
        CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
        RUST_BACKTRACE: "1"