# .github/actions/process-artifacts/action.yml
name: 'Process Artifacts'
description: 'Process and rename build artifacts'

inputs:
  os:
    description: 'Operating system'
    required: true
  rust-target:
    description: 'Rust target'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get Package Version
      id: package-version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Rename Artifacts with Version
      shell: bash
      run: |
        VERSION="${{ steps.package-version.outputs.version }}"
        OS="${{ inputs.os }}"
        RUST_TARGET="${{ inputs.rust-target }}"
        
        # 使用传入的rust目标平台
        ARTIFACTS_DIR="src-tauri/target/$RUST_TARGET/release/bundle"
        echo "使用构建产物目录: $ARTIFACTS_DIR"
        
        # 检查目录是否存在
        if [ ! -d "$ARTIFACTS_DIR" ]; then
          echo "警告: 目标平台目录不存在: $ARTIFACTS_DIR"
          echo "尝试使用通用路径..."
          ARTIFACTS_DIR="src-tauri/target/release/bundle"
          
          if [ ! -d "$ARTIFACTS_DIR" ]; then
            echo "错误: 构建产物目录不存在: $ARTIFACTS_DIR"
            echo "列出可用目录:"
            find src-tauri/target -type d -name "bundle" | sort
            exit 1
          fi
        fi
        
        # 列出构建产物目录内容以便调试
        echo "构建产物目录内容:"
        find "$ARTIFACTS_DIR" -type f | sort
        
        case $OS in
          Linux)
            for file in $ARTIFACTS_DIR/deb/*.deb; do
              if [ -f "$file" ]; then
                mv "$file" "${file%.deb}-$VERSION.deb"
              fi
            done
            for file in $ARTIFACTS_DIR/appimage/*.AppImage; do
              if [ -f "$file" ]; then
                mv "$file" "${file%.AppImage}-$VERSION.AppImage"
              fi
            done
            ;;
          Windows)
            for file in $ARTIFACTS_DIR/msi/*.msi; do
              if [ -f "$file" ]; then
                mv "$file" "${file%.msi}-$VERSION.msi"
              fi
            done
            ;;
          macOS)
            # 首先检查DMG目录是否存在
            if [ ! -d "$ARTIFACTS_DIR/dmg" ]; then
              echo "DMG目录不存在，创建目录: $ARTIFACTS_DIR/dmg"
              mkdir -p "$ARTIFACTS_DIR/dmg"
            fi
            
            # 查找DMG文件
            DMG_FILES=$(find "$ARTIFACTS_DIR" -name "*.dmg")
            if [ -z "$DMG_FILES" ]; then
              echo "错误: 没有找到任何DMG文件"
              # 检查app目录是否存在，这是DMG文件的源
              if [ -d "$ARTIFACTS_DIR/macos" ]; then
                echo "找到macos目录，内容如下:"
                ls -la "$ARTIFACTS_DIR/macos"
              fi
              if [ -d "$ARTIFACTS_DIR/app" ]; then
                echo "找到app目录，内容如下:"
                ls -la "$ARTIFACTS_DIR/app"
              fi
              exit 1
            else
              echo "找到以下DMG文件:"
              echo "$DMG_FILES"
              
              # 处理每个找到的DMG文件
              for file in $DMG_FILES; do
                filename=$(basename "$file" .dmg)
                target_file="$ARTIFACTS_DIR/dmg/$filename-$VERSION.dmg"
                echo "重命名: $file -> $target_file"
                mv "$file" "$target_file"
              done
            fi
            ;;
        esac